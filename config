<?xml version="1.0" encoding="UTF-8"?>
<config xmlns="http://web-harvest.sourceforge.net/schema/1.0/config" scriptlang="groovy">


<var-def name="bot_task_properties">
	<datastore name="sfi_refund">
		<template>select * from @this</template>
	</datastore>
</var-def>

<var-def name="ph">
		<datastore name="public_holidays">
			SELECT * from @this
		</datastore>
</var-def>

<script><![CDATA[
	def BOT_CONFIG = [:]
	bot_task_properties.getWrappedObject().toList().each { property ->
		BOT_CONFIG.put(property.get("name").toString(), property.get("value").toString())
	}
	sys.defineVariable("BOT_CONFIG", BOT_CONFIG)
]]></script>	


<script><![CDATA[ 

		//date
		import java.time.LocalDate;
		import java.time.LocalDateTime;
		import java.time.ZoneId;
		import java.time.format.DateTimeFormatter
		import java.util.*;
		import java.text.SimpleDateFormat;	
   		import java.util.Calendar;
		import java.util.Formatter;
		
		//create directory
		import java.nio.file.Files;
		import java.nio.file.Path;
		import java.nio.file.Paths;
		
		//DATASTORE
		String openPath = (BOT_CONFIG.getWrappedObject().get("open_path").toString());
		
		boolean phCheck = false;
		String dateExcelPath = "";
		
		//string builder
		String fd,fs,fa;
		
		LocalDate karanLocal = LocalDate.parse("2020-09-28"); //dated
		//LocalDate karanLocal = LocalDate.now(); //live
		LocalDateTime kLDT 		= LocalDateTime.now(ZoneId.of("GMT+04:00"));
		
		LocalDate pwd = karanLocal.minusDays(1);
		DateTimeFormatter csvDateFormat   = DateTimeFormatter.ofPattern("M/d/yyyy");
		//LIST OF PUB_HO
		List dateList = new ArrayList();
		for(int i = 0; i < ph.size(); i++){
			date = ph.get(i).getAt("Date").toString();	
			dateList.add(date);
			
			LocalDate ph = LocalDate.parse(date,csvDateFormat)
			if(karanLocal == ph){
				log.info("Public Holiday");
				phCheck = true;
			}
			
		}
		
		//PREVIOUS AND SECOND PREVIOUS WORKING DATES
		pwd = previousWorkingDate(karanLocal,dateList);
		second_pwd = previousWorkingDate(pwd,dateList);

		if(!phCheck){
		
			String path = (BOT_CONFIG.getWrappedObject().get("path").toString());
			String daily_path = path + "%s\\\\%s\\\\%s\\\\";		
			
			//PWD PATH
			DateTimeFormatter dailyFolderDateFormat = DateTimeFormatter.ofPattern("dd.MM.yy");
			Calendar pwdcal = Calendar.getInstance();
			pwdcal.clear();
			pwdcal.set(pwd.getYear(), pwd.getMonthValue()-1, pwd.getDayOfMonth());
			Formatter fmt2 = new Formatter();
			fmt2 = new Formatter();
			fmt2.format("%tm %tB",pwdcal,pwdcal);
			
			fd = String.format(daily_path,pwd.getYear(),fmt2, pwd.format(dailyFolderDateFormat));
			println(fd)
			
			//CURRENT DAY PATH
			Calendar cal = Calendar.getInstance();
			//println(cal)
			
			Formatter fmt4 = new Formatter();
			fmt4 = new Formatter();
			fmt4.format("%tm %tB",cal,cal)
				 
			fs = String.format(daily_path,karanLocal.getYear(),fmt4, karanLocal.format(dailyFolderDateFormat));
			//println(fs)
			
			//PRESENCE CHECK DATE EXCEL
			//create excel path wrt current time
			if(kLDT.getHour() <= 12){
				fs =  fs+"Morning\\\\";
				//log.info("FS-->"+fs)
				dateExcelPath = fs+karanLocal.toString()+"_morning_report.xlsx";
			}
			else{
				fs =  fs+"Evening\\\\";
				dateExcelPath = fs+karanLocal.toString()+"_evening_report.xlsx";
			}
			
			try{
				Files.createDirectories(Paths.get(fs));
			}catch(Exception e){
				log.info("Error " + e)	
			}
			
			//create monthly excel
			File dateExcelFile = new File(dateExcelPath);
			File dateExcelTemplateFile = new File(path+"sfi_refund_excel_template.xlsx")
			if(!dateExcelFile.exists()){
				log.info("Creating Daily Excel")
				
				Files.copy(dateExcelTemplateFile.toPath(),dateExcelFile.toPath());
					
			}
		
		}
		log.info("Current Date: "+karanLocal.toString());
		log.info("Previous Working Date: "+pwd.toString());
		log.info("Second Previous Working Date: "+second_pwd.toString());
		log.info("Daily Path: "+fs);
		log.info("Previous Working Day Path: "+fd);
		log.info("Open Folder Path: "+openPath);
		log.info("Daily Report Path: "+dateExcelPath);
		
		sys.defineVariable("current_date",karanLocal);
		sys.defineVariable("previous_date",pwd);
		sys.defineVariable("second_previous_date",second_pwd);
		sys.defineVariable("daily_path_str",fs);
		sys.defineVariable("pwd_path_str",fd);
		sys.defineVariable("daily_report_path_str",dateExcelPath);
		sys.defineVariable("open_path",openPath);
		sys.defineVariable("ph_check",phCheck);
		
		
		
		//PREVIOUS WORKING DAY
		public previousWorkingDate(LocalDate date, List publicHolidaysList){
			DateTimeFormatter csvDateFormat   = DateTimeFormatter.ofPattern("M/d/yyyy");
			boolean validPwd = false;
			LocalDate pwd = date.minusDays(1);	
			while(!validPwd){
				
				String pwdCheck = pwd.format(csvDateFormat);
					 
				//PREVIOUS WORKING IS A NON-SUNDAY PUBLIC HOLIDAY
				if(publicHolidaysList.contains(pwdCheck) && pwd.getDayOfWeek().toString() != "SUNDAY"){
					pwd = pwd.minusDays(1);

				}
				//THE WEEKND
				else if(pwd.getDayOfWeek().toString() == "SUNDAY"){
					//SUNDAY
					if(pwd.getDayOfWeek().toString() == "SUNDAY"){
						pwd = pwd.minusDays(1);
					}
					
					//SATURDAY
					if(pwd.getDayOfWeek().toString() == "SATURDAY"){
						pwd = pwd.minusDays(1);
					}
				}
				//ALL OTHER SCENARIOS(NORMAL WORKING DAY)
				else{
					validPwd = true;
				}
				
				
			}
			return pwd;
		}
	
]]></script>
	
	
<export include-original-data="true">
	<single-column name="current_date" value="${current_date}"/>
	<single-column name="previous_date" value="${previous_date}"/>
	<single-column name="second_previous_date" value="${second_previous_date}"/>
	<single-column name="daily_path_str" value="${daily_path_str}"/>
	<single-column name="pwd_path_str" value="${pwd_path_str}"/>
	<single-column name="daily_report_path_str" value="${daily_report_path_str}"/>
	<single-column name="open_path" value="${open_path}"/>
	<single-column name="ph_check" value="${ph_check}"/>
</export>


</config>